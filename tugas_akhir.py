# -*- coding: utf-8 -*-
"""Tugas Akhir 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CvpBQ5l8V-8tf_NUXly18KjnVfCDMHmg
"""

!pip install yfinance

# Commented out IPython magic to ensure Python compatibility.
import math
import yfinance as yf
import pandas_datareader as data
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

# %matplotlib inline

#Mengunduh data yaitu data harga saham perusahan Pt.Bank Central Asia Tbk
df = yf.download("BBCA.JK", start="2018-01-01", end="2021-12-01")
df2 = yf.download("BBCA.JK", start="2021-11-30", end="2021-12-01")
df.tail()

is_NaN = df.isnull()
row_has_NaN = is_NaN.any(axis=1)
rows_with_NaN = df[row_has_NaN]

rows_with_NaN

df.dropna(inplace=True)

df.astype(int)

df.shape

#Menampilkan data harga "Close" saham BBCA
plt.figure(figsize=(16,9))
plt.title('Harga Close Sahamn PT Bank Central Asia Tbk')
plt.plot(df['Adj Close'])
plt.xlabel('Tanggal', fontsize=18)
plt.ylabel('Harga (Rp.)', fontsize=18)
plt.show()

#Mengambil data "Close" saja dari data frame sebelumnya.

data = df.filter(['Adj Close']) #menggunakan df.filter agar mendapatkan kolom Date (sebagai index) dan kolom Adj Close yang ingin dituju
dataset = data.values

#Melakukan normalisasi data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

#Melakukan split data unutk dataa Train dan data Valid (Test) dengan perbandingan Trains:Valid adalah 8:2
training_data_len = math.ceil(len(dataset) * .8)
train = data[:training_data_len]
valid = data[training_data_len:]
training_data_len

#Memisahkan data yang telah di normalisasi dengan panjang yang telah diputuskan sebelumnya kedalam variabel train_data
train_data = scaled_data[0:training_data_len]
x_train = []
y_train = []

#Melakukan pemisahan data untuk X train dan y train sehingga dapat dimasukkan kedalam model
for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])

#Mengubah dataframe menjadi numpy array agar dapat masuk kedalam model keras
x_train, y_train = np.array(x_train), np.array(y_train)

#Karena model LSTM keras membutuhkan array 3 Dimensi untuk itu melakukan reshape data.
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

#Membuat layer yang dibutuhkan dalam metode pembelajaran mesin
model = Sequential()
model.add(LSTM(50, return_sequences=True, stateful=False, go_backwards=True, input_shape = (x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False, go_backwards=True, stateful=False))
model.add(Dense(25))
model.add(Dense(1))

#Menambahkan 'AdamW' optimizer dan perhitungan error menggunakan "MSE"
model.compile(optimizer='adam', loss='mean_squared_error')

#Menjalankan model yang telah dipersiapkan sebelumnya
model.fit(x_train, y_train, batch_size=64, epochs=100)

#Memasukkan data split Test data.
test_data = scaled_data[training_data_len - 60:, :]
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

#Mengubah dataframe menjadi numpy array
x_test = np.array(x_test)

#Melakukan reshape data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

x_test.shape

#Setelah model belajar lalu dilakukan predict terhadap x test
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#Metrics evalusi yaitu Root Means Squarred Error
rmse = np.sqrt(np.mean(predictions-y_test)**2)
rmse

#Menampilkan data asli dan data prediksi.
valid['Predictions'] = predictions

plt.figure(figsize=(16, 9))
plt.title('Harga Adj Close Sahamn PT Bank Central Asia Tbk')
plt.xlabel('Tanggal', fontsize=18)
plt.ylabel('Harga (Rp.)', fontsize=18)
plt.plot(train['Adj Close'])
plt.plot(valid[['Adj Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

#Membuat algoritma untuk mendapatkan nilai terakhir prediksi
last_60_days = data[-60:].values
last_60_days_scaled = scaler.transform(last_60_days)
X_test = []
X_test.append(last_60_days_scaled)
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
pred_price = model.predict(X_test)
pred_price = scaler.inverse_transform(pred_price)

#Menampilkan hasil prediksi
print('Harga Prediksi Hari ini = ', pred_price)
print('Harga Kemarin = ', df2['Adj Close'].values)